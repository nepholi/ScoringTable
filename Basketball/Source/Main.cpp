/*
  ==============================================================================

	This file was auto-generated by the Introjucer!

	It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include <JuceHeader.h>
#include "Main.h"
#include <Common/arduino_manager.h>
#include <Common/clock_controller.h>
#include <Common/ScoreRecord.h>

using namespace waa;

#define WindowButtonMinimum     1
#define WindowButtonMaxmum      2
#define WindowButtonClose       4
#define ArduinoSwitch       0

BasketballApplication::BasketballApplication()
	: cc_(nullptr)
{
}

void BasketballApplication::initialise(const String& commandLine)
{
	// This method is where you should put your application's initialisation code..

	mainWindow = new MainWindow(getApplicationName());

	RegisterMainWindowCallbacks(mainWindow->GetMainComponent());

	if (ArduinoSwitch)InitializeArduinoManager();
	InitializeGameClock(mainWindow->GetMainComponent());
	//adm_ = std::make_unique < ArduinoManager >();
	
	//waa::OpenCom();
	waa::TimeStampInitial();
}

void BasketballApplication::shutdown()
{
	// Add your application's shutdown code here..
	waa::ReportOutput();
	mainWindow = nullptr; // (deletes our window)
}

void BasketballApplication::systemRequestedQuit()
{
	// This is called when the app is being asked to quit: you can ignore this
	// request and let the app carry on running, or call quit() to allow the app to close.
	quit();
}

void BasketballApplication::anotherInstanceStarted(const String& commandLine)
{
	// When another instance of the app is launched while this one is running,
	// this method is invoked, and the commandLine parameter tells you what
	// the other instance's command-line arguments were.
}

void BasketballApplication::RegisterGameColckStart(MainContentComponent& mcc)
{
	cc_->ClockStart();
}

void BasketballApplication::RegisterGameColckPause(MainContentComponent & mcc)
{
	cc_->ClockPause();
}

void BasketballApplication::RegisterHomeScoreIncreaseButton(MainContentComponent& mcc)
{
	
	mcc.RegisterMainWindowCallbacks(kHomeScoreIncreaseButton,
									[&mcc,this]()
	{
		Logger::outputDebugString("callback arrive here");
		auto home_score = mcc.GetHomeScore();
		home_score++;
		
		
		//ArduinoManager::SendCommandToArduino(aHomeScoreIncrease);
		adm_->SendCommandToArduino(aHomeScoreIncrease);
		
		//waa::PC2Arduino("IncA");
		MessageManager::callAsync([home_score, &mcc]()
		{
			mcc.SetHomeScore(home_score);
			
		});
		
		waa::time_record(DEF_TEAM_HOME, home_score, cc_->GetClockValue());
		return true;
	});
}

void BasketballApplication::RegisterHomeScoreDecreaseButton(MainContentComponent& mcc)
{
	
	mcc.RegisterMainWindowCallbacks(kHomeScoreDecreaseButton,
									[&mcc,this]()
	{

		Logger::outputDebugString("callback arrive here");
		auto home_score = mcc.GetHomeScore();

		if (home_score == 0)
			return false;
		home_score--;
		
		
		//if(ArduinoSwitch)waa::PC2Arduino("DecA");
		if (ArduinoSwitch)ArduinoManager::SendCommandToArduino(aHomeScoreDecrease);
		MessageManager::callAsync([home_score, &mcc]()
		{
			mcc.SetHomeScore(home_score);
		});
		return true;
	});
}

void BasketballApplication::RegisterGuestScoreIncreaseButton(MainContentComponent& mcc)
{
	mcc.RegisterMainWindowCallbacks(kGuestScoreIncreaseButton,
									[&mcc,this]()
	{
		Logger::outputDebugString("callback arrive here");
		auto guest_score = mcc.GetGuestScore();
		guest_score++;
		//if (ArduinoSwitch)waa::PC2Arduino("IncB");
		if (ArduinoSwitch)ArduinoManager::SendCommandToArduino(aGuestScoreIncrease);
		MessageManager::callAsync([guest_score, &mcc]()
		{
			mcc.SetGuestScore(guest_score);
		});
		waa::time_record(DEF_TEAM_GUEST, guest_score, cc_->GetClockValue());
		return true;
	});
}

void BasketballApplication::RegisterGuestScoreDecreaseButton(MainContentComponent& mcc)
{
	mcc.RegisterMainWindowCallbacks(kGuestScoreDecreaseButton,
									[&mcc]()
	{
		Logger::outputDebugString("callback arrive here");
		auto guest_score = mcc.GetGuestScore();

		if (guest_score == 0)
			return false;
		guest_score--;
		//if (ArduinoSwitch)waa::PC2Arduino("DecB");
		if (ArduinoSwitch)ArduinoManager::SendCommandToArduino(aGuestScoreDecrease);
		
		MessageManager::callAsync([guest_score, &mcc]()
		{
			mcc.SetGuestScore(guest_score);
		});
		return true;
	});
}

void BasketballApplication::RegisterMainWindowCallbacks(MainContentComponent& mcc)
{
	RegisterHomeScoreIncreaseButton(mcc);
	RegisterHomeScoreDecreaseButton(mcc);
	RegisterGuestScoreIncreaseButton(mcc);
	RegisterGuestScoreDecreaseButton(mcc);
}

bool BasketballApplication::InitializeGameClock(MainContentComponent& mcc)
{
	int game_clock_total_time_sec = 600;
	mcc.SetGameClock(game_clock_total_time_sec);

	cc_ = std::make_unique<ClockController>(game_clock_total_time_sec,
		[&mcc](int remain_sec) 
	{
		Logger::outputDebugString(String::formatted("Time remain: %d second", remain_sec));
		mcc.SetGameClock(remain_sec);
	},
		[&mcc]() 
	{
		Logger::outputDebugString("Time is up !!!!!");
		mcc.SetGameClock(0);
	});
	cc_->ClockStart();
	
	return true;
}

bool BasketballApplication::InitializeArduinoManager()
{
	jassert(adm_ == nullptr);

	adm_ = std::make_unique<ArduinoManager>();
	if (!adm_->SetupArduinoEnvironment())
		return false;
	
	if (!adm_->PingAuduino())
		return false;
	waa::ComportSet("COM9");
	waa::ComportInit();
	return true;
}

//=================================================================
//class MainWindow
//=================================================================
void BasketballApplication::MainWindow::closeButtonPressed()
{

	JUCEApplication::getInstance()->systemRequestedQuit();
}

BasketballApplication::MainWindow::MainWindow(String name)
	: DocumentWindow(name,
					 Colours::lightgrey,
					 WindowButtonMinimum + WindowButtonClose)
{
	main_component_ = new MainContentComponent();
	setUsingNativeTitleBar(false);
	setContentOwned(main_component_, true);

	centreWithSize(getWidth(), getHeight());
	setVisible(true);

	setResizable(false, false);
	setFullScreen(false);
}

MainContentComponent& BasketballApplication::MainWindow::GetMainComponent() const
{
	jassert(main_component_ != nullptr);
	return *main_component_;
}
